"use client";

import { API_BASE_URL } from "@/config";
import React, { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import CommentCard from "@/components/main-page/CommentSection/comment-card";
import ReviewCard from "@/components/main-page/ReviewSection/review-card";
import AnimeCommentCard from "@/components/main-page/CommentSection/anime-comment-card";
import AnimeCommentSection from "@/components/main-page/CommentSection/anime-comment-section";
import AnimePosterSection from "@/components/anime-page/AnimePosterSection";
import AnimeMainInfoSection from "@/components/anime-page/AnimeMainInfoSection";
import AnimeEpisodesSection from "@/components/anime-page/AnimeEpisodesSection";
import AnimeReviewsSection from "@/components/anime-page/AnimeReviewsSection";
import { SkeletonTheme } from "react-loading-skeleton";
import AnimeCharactersSection from "@/components/anime-page/AnimeCharactersSection";
import AnimeDetailsPanel from "@/components/shared/anime-details-panel";

interface Studio {
  id: string;
  name: string;
  slug: string;
  image?: string;
  description?: string;
}

interface Seo {
  title: string;
  description: string;
  image: string;
}

interface Person {
  slug: string;
  name: string;
  image?: string;
  birthday?: string | null;
  age?: number | null;
  type: string; // "character" –∞–±–æ —ñ–Ω—à—ñ
}

interface User {
  id: string;
  name: string;
  avatar: string;
}

interface Comment {
  id: string;
  user: User;
  body: string;
  created_at: string;
  likes?: number;
  dislikes?: number;
  replies?: Comment[];
}

interface Rating {
  id: string;
  user: User;
  review?: string;
  number: number;
  created_at: string; // ISO string
}

interface Episode {
  id: string;
  slug: string;
  name: string;
  number: number;
  pictures?: string | string[] | null;
  air_date?: string | null;
  duration?: number;
}

interface People {
  characters: Person[];
  authors: Person[];
}

interface AnimeDetails {
  id: string;
  slug: string;
  name: string;
  description: string;
  image_name?: string;
  poster: string;
  duration?: number;
  episodes_count?: number;
  first_air_date?: string;
  last_air_date?: string;
  imdb_score?: number;
  is_published?: boolean;
  kind?: string;
  studio?: Studio;
  seo?: Seo;
  episodes: Episode[];
  ratings?: Rating[];
  comments?: Comment[];
  people: {
    characters?: Person[];
    authors?: Person[];
  };
  tags?: string[];
  created_at?: string;
  updated_at?: string;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function getUserToken(): string | null {
  console.log("üîç –ü–æ—à—É–∫ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...");
  
  // –°–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ localStorage
  try {
    const token = localStorage.getItem('token') || 
                  localStorage.getItem('authToken') || 
                  localStorage.getItem('access_token') ||
                  localStorage.getItem('user_token');
    
    console.log("üîë –¢–æ–∫–µ–Ω –∑ localStorage:", token ? "–∑–Ω–∞–π–¥–µ–Ω–∏–π" : "–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
    return token;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è localStorage:", error);
    return null;
  }
  
  // TODO: –Ø–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ Redux/Zustand/Context - –¥–æ–¥–∞–π—Ç–µ —Ç—É—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ª–æ–≥—ñ–∫—É
  // –ü—Ä–∏–∫–ª–∞–¥ –∑ Redux:
  // const token = useSelector((state: RootState) => state.auth.token);
  
  // –ü—Ä–∏–∫–ª–∞–¥ –∑ Context:
  // const { token } = useContext(AuthContext);
}

export default function AnimePage() {
  const params = useParams();

  // –ë–µ–∑–ø–µ—á–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –æ—Ç—Ä–∏–º–∞—Ç–∏ slug ‚Äî —è–∫—â–æ params —á–∏ slug –Ω–µ–º–∞—î, slug –±—É–¥–µ –ø—É—Å—Ç–∏–º —Ä—è–¥–∫–æ–º
  const slug =
    typeof params === "object" && params !== null && "slug" in params
      ? Array.isArray(params.slug)
        ? params.slug[0]
        : params.slug
      : "";

  const [anime, setAnime] = useState<AnimeDetails | null>(null);
  const [tags, setTags] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [userToken, setUserToken] = useState<string | null>(null);

  // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const token = getUserToken();
    setUserToken(token);
    console.log("üë§ –¢–æ–∫–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", token ? "—Ç–∞–∫" : "–Ω—ñ");
  }, []);

  async function fetchAnimeData(slug: string) {
    setIsLoading(true); 
    try {
      if (!slug) {
        setAnime(null);
        setTags([]);
        setIsLoading(false);
        return;
      }

      const [animeRes, tagsRes] = await Promise.all([
        fetch(`${API_BASE_URL}animes/${slug}`, { cache: "no-store" }),
        fetch(`${API_BASE_URL}animes/${slug}/tags`, { cache: "no-store" }),
      ]);

      if (!animeRes.ok) {
        setAnime(null); 
        setTags([]);
        setIsLoading(false);
        return;
      }

      const animeJson = await animeRes.json();
      const tagsJson = await tagsRes.json();

      setAnime(animeJson.data);
      setTags(tagsJson.data || []);
      
      console.log("üì∫ –ê–Ω—ñ–º–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", {
        id: animeJson.data?.id,
        name: animeJson.data?.name,
        commentsCount: animeJson.data?.comments?.length || 0
      });
    } catch (error) {
      console.error("Error loading anime data:", error);
      setAnime(null); 
      setTags([]);
    } finally {
      setIsLoading(false);
    }
  }

  useEffect(() => {
    if (slug) {
      fetchAnimeData(slug);
    }
  }, [slug]);

  if (isLoading) {
    return <div className="text-white text-center mt-20">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  }

  if (!anime) {
    return <div className="text-white text-center mt-20">–ê–Ω—ñ–º–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>;
  }

  return (
    <SkeletonTheme
      baseColor="#23242A"
      highlightColor="#44454A"
      borderRadius={8}
      duration={1.2}
    >
      {/* Main content */}
      <div className="mx-auto flex max-w-7xl flex-col gap-10 px-4 py-10 md:flex-row">
        {/* Left: Poster */}
        <AnimePosterSection
          poster={anime.poster}
          name={anime.name}
          isLoading={isLoading}
        />

        {/* Center: Main info */}
        <div className="flex flex-1 flex-col gap-4">
          <AnimeMainInfoSection
            anime={anime}
            tags={tags}
            description={anime.description}
            isLoading={isLoading}
          />
          <AnimeEpisodesSection
            animeTitle={anime.name}
            episodes={anime.episodes}
            isLoading={isLoading}
          />
          <AnimeCharactersSection
            authors={anime.people.characters ?? []}
            title="–ì–æ–ª–æ–≤–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ"
            text="–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ –ø–æ–∫–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ üòî"
          />
          <AnimeCharactersSection
            authors={anime.people.authors}
            title="–ê–≤—Ç–æ—Ä–∏"
            text="–ê–≤—Ç–æ—Ä–∏ –ø–æ–∫–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ üòî"
          />
          <AnimeReviewsSection
            reviews={anime.ratings}
            animeName={anime.name}
            animeId={anime.id}
            isLoading={isLoading}
            token={userToken ?? undefined} 
          />
          {/* ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ */}
          <AnimeCommentSection
            comments={anime.comments}
            isLoading={isLoading}
            commentableType="anime"          // üëà –¢–∏–ø –æ–±'—î–∫—Ç–∞
            commentableId={anime.id}         // üëà ID –∞–Ω—ñ–º–µ
            token={userToken ?? undefined}   // üëà –¢–æ–∫–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ null –≤ undefined)
          />
        </div>

        {/* Right: Details panel (only visible on large screens) */}
        <div className="hidden min-w-[260px] flex-col items-end gap-6 lg:flex">
          {isLoading ? (
            <AnimeDetailsPanel anime={anime} isLoading />
          ) : (
            <>
              <div className="mb-2 flex items-center gap-2">
                {/* <span className="text-3xl font-bold text-white">
                {anime.localRating}
              </span> */}
                {/* <Star className="h-6 w-6 text-white" fill="white" /> */}
              </div>
              <AnimeDetailsPanel anime={anime} />
            </>
          )}
        </div>
      </div>
    </SkeletonTheme>
  );
}